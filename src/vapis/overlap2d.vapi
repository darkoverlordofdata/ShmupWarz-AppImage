/* overlap2d.vapi generated by valac 0.34.4, do not modify. */

namespace overlap2dConstants {
	[CCode (cheader_filename = "overlap2d.h")]
	public const string DATADIR;
	[CCode (cheader_filename = "overlap2d.h")]
	public const string GETTEXT_PACKAGE;
	[CCode (cheader_filename = "overlap2d.h")]
	public const string PKGDATADIR;
	[CCode (cheader_filename = "overlap2d.h")]
	public const string RELEASE_NAME;
	[CCode (cheader_filename = "overlap2d.h")]
	public const string VERSION;
}
namespace Overlap2D {
	namespace Data {
		[CCode (cheader_filename = "overlap2d.h")]
		public class CompositeItemVO : Overlap2D.Data.MainItemVO {
			public CompositeItemVO (Json.Object json);
			public string to_string (int z = 0);
			public double height { get; set; }
			public double width { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class CompositeVO : GLib.Object {
			public CompositeVO (Json.Object json);
			public string to_string (int z = 0);
			public Gee.ArrayList<Overlap2D.Data.LayerItemVO> layers { get; set; }
			public Gee.ArrayList<Overlap2D.Data.Image9patchVO> sImage9patchs { get; set; }
			public Gee.ArrayList<Overlap2D.Data.SimpleImageVO> sImages { get; set; }
			public Gee.ArrayList<Overlap2D.Data.LabelVO> sLabels { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class Image9patchVO : Overlap2D.Data.MainItemVO {
			public Image9patchVO (Json.Object json);
			public string to_string (int z = 0);
			public double height { get; set; }
			public string imageName { get; set; }
			public double width { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class LabelVO : Overlap2D.Data.MainItemVO {
			public LabelVO (Json.Object json);
			public string to_string (int z = 0);
			public int align { get; set; }
			public double height { get; set; }
			public bool multiline { get; set; }
			public int size { get; set; }
			public string style { get; set; }
			public string text { get; set; }
			public double width { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class LayerItemVO : GLib.Object {
			public LayerItemVO (Json.Object json);
			public string to_string (int z = 0);
			public bool isLocked { get; set; }
			public bool isVisible { get; set; }
			public string layerName { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public abstract class MainItemVO : GLib.Object {
			public MainItemVO (Json.Object json);
			public string to_string (int z = 0);
			public Overlap2D.Data.CompositeVO? composite { get; set; }
			public double height { get; set; }
			public string itemName { get; set; }
			public string layerName { get; set; }
			public double originX { get; set; }
			public double originY { get; set; }
			public Overlap2D.Data.PhysicsBodyDataVO? physics { get; set; }
			public Overlap2D.Data.ShapeVO? shape { get; set; }
			public string[] tags { get; set; }
			public int uniqueId { get; set; }
			public double width { get; set; }
			public double x { get; set; }
			public double y { get; set; }
			public int zIndex { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class PhysicsBodyDataVO : GLib.Object {
			public PhysicsBodyDataVO (Json.Object json);
			public string to_string (int z = 0);
			public bool allowSleep { get; set; }
			public bool awake { get; set; }
			public int bodyType { get; set; }
			public double density { get; set; }
			public double friction { get; set; }
			public double mass { get; set; }
			public double restitution { get; set; }
			public bool sensor { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class PhysicsPropertiesVO : GLib.Object {
			public PhysicsPropertiesVO (Json.Object json);
			public string to_string (int z = 0);
			public bool enabled { get; set; }
			public double gravityX { get; set; }
			public double gravityY { get; set; }
			public double sleepVelocity { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class PointVO : GLib.Object {
			public PointVO (Json.Object json);
			public string to_string (int z = 0);
			public double x { get; set; }
			public double y { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class ProjectInfoVO : GLib.Object {
			public ProjectInfoVO (Json.Object json);
			public Overlap2D.Data.ResolutionEntryVO getResolution (string name);
			public string to_string (int z = 0);
			public Gee.HashMap<string,Overlap2D.Data.CompositeItemVO> libraryItems { get; set; }
			public Overlap2D.Data.ResolutionEntryVO originalResolution { get; set; }
			public int pixelToWorld { get; set; }
			public Gee.ArrayList<Overlap2D.Data.ResolutionEntryVO> resolutions { get; set; }
			public Gee.ArrayList<Overlap2D.Data.SceneVO> scenes { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class ResolutionEntryVO : GLib.Object {
			public ResolutionEntryVO (Json.Object json);
			public double getMultiplier (Overlap2D.Data.ResolutionEntryVO originalResolution);
			public string to_string (int z = 0);
			public int @base { get; set; }
			public int height { get; set; }
			public string name { get; set; }
			public int width { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class SceneVO : GLib.Object {
			public SceneVO (Json.Object json);
			public string to_string (int z = 0);
			public double[] ambientColor { get; set; }
			public Overlap2D.Data.CompositeVO? composite { get; set; }
			public Gee.ArrayList<double?> horizontalGuides { get; set; }
			public bool lightSystemEnabled { get; set; }
			public Overlap2D.Data.PhysicsPropertiesVO? physicsPropertiesVO { get; set; }
			public string sceneName { get; set; }
			public Gee.ArrayList<double?> verticalGuides { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class ShapeVO : GLib.Object {
			public ShapeVO (Json.Object json);
			public string to_string (int z = 0);
			public Gee.ArrayList<Gee.ArrayList<Overlap2D.Data.PointVO>> polygons { get; set; }
		}
		[CCode (cheader_filename = "overlap2d.h")]
		public class SimpleImageVO : Overlap2D.Data.MainItemVO {
			public SimpleImageVO (Json.Object json);
			public string to_string (int z = 0);
			public string imageName { get; set; }
			public bool isPolygon { get; set; }
			public bool isRepeat { get; set; }
		}
	}
	namespace Resources {
		[CCode (cheader_filename = "overlap2d.h")]
		public class ResourceManager : GLib.Object {
			public const string fontsPath;
			public const string packResolutionName;
			public const string particleEffectsPath;
			public const string scenesPath;
			public const string shadersPath;
			public const string spineAnimationsPath;
			public const string spriteAnimationsPath;
			public const string spriterAnimationsPath;
			public ResourceManager (string uri);
			public Overlap2D.Data.ProjectInfoVO getProjectVO ();
			public Overlap2D.Data.SceneVO getSceneVO (string name);
			public void initAllResources ();
			public Overlap2D.Data.ProjectInfoVO loadProjectVO ();
			public Overlap2D.Data.SceneVO loadSceneVO (string sceneName);
			public void scheduleScene (string name);
			public Gee.HashMap<string,Overlap2D.Data.SceneVO> loadedSceneVOs { get; }
			public Gee.ArrayList<string> preparedSceneNames { get; }
			public Overlap2D.Data.ProjectInfoVO projectVO { get; }
			public string uri { get; }
		}
	}
	[CCode (cheader_filename = "overlap2d.h")]
	public class SceneLoader : GLib.Object {
		public SceneLoader (string uri);
		public Overlap2D.Data.SceneVO loadScene (string sceneName);
		public Overlap2D.Data.CompositeItemVO loadVoFromLibrary (string libraryName);
		public Overlap2D.Resources.ResourceManager rm { get; }
		public Overlap2D.Data.SceneVO sceneVO { get; }
	}
}
