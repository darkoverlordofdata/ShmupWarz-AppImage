/**
 * Entitas Generated Components and Extensions for Example
 *
 * do not edit this file
 */
[indent=4]
uses Entitas
uses Gee

namespace ShmupWarz

    const POOL_SIZE : int = 128

    /**
    * Component extensions
    */
    const components: array of string = {
        "BoundsComponent",
        "BulletComponent",
        "ColorTweenComponent",
        "DestroyComponent",
        "EnemyComponent",
        "ExpiresComponent",
        "FiringComponent",
        "HealthComponent",
        "LayerComponent",
        "LifeComponent",
        "MineComponent",
        "MouseComponent",
        "PlayerComponent",
        "PositionComponent",
        "ResourceComponent",
        "ScaleTweenComponent",
        "ScaleComponent",
        "ScoreComponent",
        "SoundEffectComponent",
        "TextComponent",
        "TintComponent",
        "VelocityComponent",
        "ComponentsCount"
    }

    enum Component
        Bounds
        Bullet
        ColorTween
        Destroy
        Enemy
        Expires
        Firing
        Health
        Layer
        Life
        Mine
        Mouse
        Player
        Position
        Resource
        ScaleTween
        Scale
        Score
        SoundEffect
        Text
        Tint
        Velocity
        ComponentsCount



    class BoundsComponent : Object implements IComponent 
        radius : double 

    class BulletComponent : Object implements IComponent 
        active : bool = true

    class ColorTweenComponent : Object implements IComponent 
        redMin : double 
        redMax : double 
        redSpeed : double 
        greenMin : double 
        greenMax : double 
        greenSpeed : double 
        blueMin : double 
        blueMax : double 
        blueSpeed : double 
        alphaMin : double 
        alphaMax : double 
        alphaSpeed : double 
        redAnimate : bool 
        greenAnimate : bool 
        blueAnimate : bool 
        alphaAnimate : bool 
        repeat : bool 

    class DestroyComponent : Object implements IComponent 
        active : bool = true

    class EnemyComponent : Object implements IComponent 
        active : bool = true

    class ExpiresComponent : Object implements IComponent 
        delay : double 

    class FiringComponent : Object implements IComponent 
        active : bool = true

    class HealthComponent : Object implements IComponent 
        health : double 
        maximumHealth : double 

    class LayerComponent : Object implements IComponent 
        ordinal : int 

    class LifeComponent : Object implements IComponent 
        count : int 

    class MineComponent : Object implements IComponent 
        active : bool = true

    class MouseComponent : Object implements IComponent 
        x : double 
        y : double 

    class PlayerComponent : Object implements IComponent 
        active : bool = true

    class PositionComponent : Object implements IComponent 
        x : double 
        y : double 

    class ResourceComponent : Object implements IComponent 
        path : string 
        sprite : Object 
        bgd : bool 

    class ScaleTweenComponent : Object implements IComponent 
        min : double 
        max : double 
        speed : double 
        repeat : bool 
        active : bool 

    class ScaleComponent : Object implements IComponent 
        x : double 
        y : double 

    class ScoreComponent : Object implements IComponent 
        value : double 

    class SoundEffectComponent : Object implements IComponent 
        effect : int 

    class TextComponent : Object implements IComponent 
        text : string 
        sprite : Object 

    class TintComponent : Object implements IComponent 
        r : int 
        g : int 
        b : int 
        a : int 

    class VelocityComponent : Object implements IComponent 
        x : double 
        y : double 



    /**
    * IEntity extensions
    */
    /* Preallocate component pools*/

    /** @type entitas.utils.GLib.Queue<Bounds> */
    _boundsComponentPool : GLib.Queue of BoundsComponent

    /** @type Bullet */
    _bulletComponent : BulletComponent
    /** @type entitas.utils.GLib.Queue<ColorTween> */
    _colorTweenComponentPool : GLib.Queue of ColorTweenComponent

    /** @type Destroy */
    _destroyComponent : DestroyComponent

    /** @type Enemy */
    _enemyComponent : EnemyComponent
    /** @type entitas.utils.GLib.Queue<Expires> */
    _expiresComponentPool : GLib.Queue of ExpiresComponent

    /** @type Firing */
    _firingComponent : FiringComponent
    /** @type entitas.utils.GLib.Queue<Health> */
    _healthComponentPool : GLib.Queue of HealthComponent
    /** @type entitas.utils.GLib.Queue<Layer> */
    _layerComponentPool : GLib.Queue of LayerComponent
    /** @type entitas.utils.GLib.Queue<Life> */
    _lifeComponentPool : GLib.Queue of LifeComponent

    /** @type Mine */
    _mineComponent : MineComponent
    /** @type entitas.utils.GLib.Queue<Mouse> */
    _mouseComponentPool : GLib.Queue of MouseComponent

    /** @type Player */
    _playerComponent : PlayerComponent
    /** @type entitas.utils.GLib.Queue<Position> */
    _positionComponentPool : GLib.Queue of PositionComponent
    /** @type entitas.utils.GLib.Queue<Resource> */
    _resourceComponentPool : GLib.Queue of ResourceComponent
    /** @type entitas.utils.GLib.Queue<ScaleTween> */
    _scaleTweenComponentPool : GLib.Queue of ScaleTweenComponent
    /** @type entitas.utils.GLib.Queue<Scale> */
    _scaleComponentPool : GLib.Queue of ScaleComponent
    /** @type entitas.utils.GLib.Queue<Score> */
    _scoreComponentPool : GLib.Queue of ScoreComponent
    /** @type entitas.utils.GLib.Queue<SoundEffect> */
    _soundEffectComponentPool : GLib.Queue of SoundEffectComponent
    /** @type entitas.utils.GLib.Queue<Text> */
    _textComponentPool : GLib.Queue of TextComponent
    /** @type entitas.utils.GLib.Queue<Tint> */
    _tintComponentPool : GLib.Queue of TintComponent
    /** @type entitas.utils.GLib.Queue<Velocity> */
    _velocityComponentPool : GLib.Queue of VelocityComponent


    def initializePools()
        _boundsComponentPool = new GLib.Queue of BoundsComponent
        for var i=1 to POOL_SIZE
            _boundsComponentPool.push_head(new BoundsComponent())

        _bulletComponent = new BulletComponent()
        _colorTweenComponentPool = new GLib.Queue of ColorTweenComponent
        for var i=1 to POOL_SIZE
            _colorTweenComponentPool.push_head(new ColorTweenComponent())

        _destroyComponent = new DestroyComponent()

        _enemyComponent = new EnemyComponent()
        _expiresComponentPool = new GLib.Queue of ExpiresComponent
        for var i=1 to POOL_SIZE
            _expiresComponentPool.push_head(new ExpiresComponent())

        _firingComponent = new FiringComponent()
        _healthComponentPool = new GLib.Queue of HealthComponent
        for var i=1 to POOL_SIZE
            _healthComponentPool.push_head(new HealthComponent())
        _layerComponentPool = new GLib.Queue of LayerComponent
        for var i=1 to POOL_SIZE
            _layerComponentPool.push_head(new LayerComponent())
        _lifeComponentPool = new GLib.Queue of LifeComponent
        for var i=1 to POOL_SIZE
            _lifeComponentPool.push_head(new LifeComponent())

        _mineComponent = new MineComponent()
        _mouseComponentPool = new GLib.Queue of MouseComponent
        for var i=1 to POOL_SIZE
            _mouseComponentPool.push_head(new MouseComponent())

        _playerComponent = new PlayerComponent()
        _positionComponentPool = new GLib.Queue of PositionComponent
        for var i=1 to POOL_SIZE
            _positionComponentPool.push_head(new PositionComponent())
        _resourceComponentPool = new GLib.Queue of ResourceComponent
        for var i=1 to POOL_SIZE
            _resourceComponentPool.push_head(new ResourceComponent())
        _scaleTweenComponentPool = new GLib.Queue of ScaleTweenComponent
        for var i=1 to POOL_SIZE
            _scaleTweenComponentPool.push_head(new ScaleTweenComponent())
        _scaleComponentPool = new GLib.Queue of ScaleComponent
        for var i=1 to POOL_SIZE
            _scaleComponentPool.push_head(new ScaleComponent())
        _scoreComponentPool = new GLib.Queue of ScoreComponent
        for var i=1 to POOL_SIZE
            _scoreComponentPool.push_head(new ScoreComponent())
        _soundEffectComponentPool = new GLib.Queue of SoundEffectComponent
        for var i=1 to POOL_SIZE
            _soundEffectComponentPool.push_head(new SoundEffectComponent())
        _textComponentPool = new GLib.Queue of TextComponent
        for var i=1 to POOL_SIZE
            _textComponentPool.push_head(new TextComponent())
        _tintComponentPool = new GLib.Queue of TintComponent
        for var i=1 to POOL_SIZE
            _tintComponentPool.push_head(new TintComponent())
        _velocityComponentPool = new GLib.Queue of VelocityComponent
        for var i=1 to POOL_SIZE
            _velocityComponentPool.push_head(new VelocityComponent())




    /** IEntity: Bounds methods*/

    /** @type Bounds */
    def getBounds(e: IEntity) : BoundsComponent
        return (BoundsComponent)e.getComponent(Component.Bounds)

    /** @type boolean */
    def hasBounds(e: IEntity) : bool
        return e.hasComponent(Component.Bounds)

    def clearBoundsComponentPool()
        _boundsComponentPool.clear()

    /**
        * @param radius double
        * @return entitas.IEntity
        */
    def addBounds(e: IEntity, radius:double) : IEntity
        var c = _boundsComponentPool.length > 0 ? _boundsComponentPool.pop_head() : new BoundsComponent()
        c.radius = radius
        e.addComponent(Component.Bounds, c)
        return e

    /**
        * @param radius double
        * @return entitas.IEntity
        */
    def replaceBounds(e: IEntity, radius:double) : IEntity
        var previousComponent = hasBounds(e) ? getBounds(e) : null
        var c = _boundsComponentPool.length > 0 ? _boundsComponentPool.pop_head() : new BoundsComponent()
        c.radius = radius
        e.replaceComponent(Component.Bounds, c) 
        if previousComponent != null
            _boundsComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeBounds(e: IEntity) : IEntity
        var c = getBounds(e)
        e.removeComponent(Component.Bounds) 
        _boundsComponentPool.push_head(c)
        return e



    /** IEntity: Bullet methods*/

    /**
        * @param IEntity
        * @return boolean
        */
    def isBullet(e: IEntity) : bool
        return e.hasComponent(Component.Bullet)

    /**
        * @param IEntity
        * @param value
        * @return IEntity
        */
    def setBullet(e: IEntity, value: bool) : IEntity
        if value
            e.addComponent(Component.Bullet, _bulletComponent)
        else
            e.removeComponent(Component.Bullet)
        return e
            


    /** IEntity: ColorTween methods*/

    /** @type ColorTween */
    def getColorTween(e: IEntity) : ColorTweenComponent
        return (ColorTweenComponent)e.getComponent(Component.ColorTween)

    /** @type boolean */
    def hasColorTween(e: IEntity) : bool
        return e.hasComponent(Component.ColorTween)

    def clearColorTweenComponentPool()
        _colorTweenComponentPool.clear()

    /**
        * @param redMin double
        * @param redMax double
        * @param redSpeed double
        * @param greenMin double
        * @param greenMax double
        * @param greenSpeed double
        * @param blueMin double
        * @param blueMax double
        * @param blueSpeed double
        * @param alphaMin double
        * @param alphaMax double
        * @param alphaSpeed double
        * @param redAnimate bool
        * @param greenAnimate bool
        * @param blueAnimate bool
        * @param alphaAnimate bool
        * @param repeat bool
        * @return entitas.IEntity
        */
    def addColorTween(e: IEntity, redMin:double,redMax:double,redSpeed:double,greenMin:double,greenMax:double,greenSpeed:double,blueMin:double,blueMax:double,blueSpeed:double,alphaMin:double,alphaMax:double,alphaSpeed:double,redAnimate:bool,greenAnimate:bool,blueAnimate:bool,alphaAnimate:bool,repeat:bool) : IEntity
        var c = _colorTweenComponentPool.length > 0 ? _colorTweenComponentPool.pop_head() : new ColorTweenComponent()
        c.redMin = redMin
        c.redMax = redMax
        c.redSpeed = redSpeed
        c.greenMin = greenMin
        c.greenMax = greenMax
        c.greenSpeed = greenSpeed
        c.blueMin = blueMin
        c.blueMax = blueMax
        c.blueSpeed = blueSpeed
        c.alphaMin = alphaMin
        c.alphaMax = alphaMax
        c.alphaSpeed = alphaSpeed
        c.redAnimate = redAnimate
        c.greenAnimate = greenAnimate
        c.blueAnimate = blueAnimate
        c.alphaAnimate = alphaAnimate
        c.repeat = repeat
        e.addComponent(Component.ColorTween, c)
        return e

    /**
        * @param redMin double
        * @param redMax double
        * @param redSpeed double
        * @param greenMin double
        * @param greenMax double
        * @param greenSpeed double
        * @param blueMin double
        * @param blueMax double
        * @param blueSpeed double
        * @param alphaMin double
        * @param alphaMax double
        * @param alphaSpeed double
        * @param redAnimate bool
        * @param greenAnimate bool
        * @param blueAnimate bool
        * @param alphaAnimate bool
        * @param repeat bool
        * @return entitas.IEntity
        */
    def replaceColorTween(e: IEntity, redMin:double,redMax:double,redSpeed:double,greenMin:double,greenMax:double,greenSpeed:double,blueMin:double,blueMax:double,blueSpeed:double,alphaMin:double,alphaMax:double,alphaSpeed:double,redAnimate:bool,greenAnimate:bool,blueAnimate:bool,alphaAnimate:bool,repeat:bool) : IEntity
        var previousComponent = hasColorTween(e) ? getColorTween(e) : null
        var c = _colorTweenComponentPool.length > 0 ? _colorTweenComponentPool.pop_head() : new ColorTweenComponent()
        c.redMin = redMin
        c.redMax = redMax
        c.redSpeed = redSpeed
        c.greenMin = greenMin
        c.greenMax = greenMax
        c.greenSpeed = greenSpeed
        c.blueMin = blueMin
        c.blueMax = blueMax
        c.blueSpeed = blueSpeed
        c.alphaMin = alphaMin
        c.alphaMax = alphaMax
        c.alphaSpeed = alphaSpeed
        c.redAnimate = redAnimate
        c.greenAnimate = greenAnimate
        c.blueAnimate = blueAnimate
        c.alphaAnimate = alphaAnimate
        c.repeat = repeat
        e.replaceComponent(Component.ColorTween, c) 
        if previousComponent != null
            _colorTweenComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeColorTween(e: IEntity) : IEntity
        var c = getColorTween(e)
        e.removeComponent(Component.ColorTween) 
        _colorTweenComponentPool.push_head(c)
        return e



    /** IEntity: Destroy methods*/

    /**
        * @param IEntity
        * @return boolean
        */
    def isDestroy(e: IEntity) : bool
        return e.hasComponent(Component.Destroy)

    /**
        * @param IEntity
        * @param value
        * @return IEntity
        */
    def setDestroy(e: IEntity, value: bool) : IEntity
        if value
            e.addComponent(Component.Destroy, _destroyComponent)
        else
            e.removeComponent(Component.Destroy)
        return e
            


    /** IEntity: Enemy methods*/

    /**
        * @param IEntity
        * @return boolean
        */
    def isEnemy(e: IEntity) : bool
        return e.hasComponent(Component.Enemy)

    /**
        * @param IEntity
        * @param value
        * @return IEntity
        */
    def setEnemy(e: IEntity, value: bool) : IEntity
        if value
            e.addComponent(Component.Enemy, _enemyComponent)
        else
            e.removeComponent(Component.Enemy)
        return e
            


    /** IEntity: Expires methods*/

    /** @type Expires */
    def getExpires(e: IEntity) : ExpiresComponent
        return (ExpiresComponent)e.getComponent(Component.Expires)

    /** @type boolean */
    def hasExpires(e: IEntity) : bool
        return e.hasComponent(Component.Expires)

    def clearExpiresComponentPool()
        _expiresComponentPool.clear()

    /**
        * @param delay double
        * @return entitas.IEntity
        */
    def addExpires(e: IEntity, delay:double) : IEntity
        var c = _expiresComponentPool.length > 0 ? _expiresComponentPool.pop_head() : new ExpiresComponent()
        c.delay = delay
        e.addComponent(Component.Expires, c)
        return e

    /**
        * @param delay double
        * @return entitas.IEntity
        */
    def replaceExpires(e: IEntity, delay:double) : IEntity
        var previousComponent = hasExpires(e) ? getExpires(e) : null
        var c = _expiresComponentPool.length > 0 ? _expiresComponentPool.pop_head() : new ExpiresComponent()
        c.delay = delay
        e.replaceComponent(Component.Expires, c) 
        if previousComponent != null
            _expiresComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeExpires(e: IEntity) : IEntity
        var c = getExpires(e)
        e.removeComponent(Component.Expires) 
        _expiresComponentPool.push_head(c)
        return e



    /** IEntity: Firing methods*/

    /**
        * @param IEntity
        * @return boolean
        */
    def isFiring(e: IEntity) : bool
        return e.hasComponent(Component.Firing)

    /**
        * @param IEntity
        * @param value
        * @return IEntity
        */
    def setFiring(e: IEntity, value: bool) : IEntity
        if value
            e.addComponent(Component.Firing, _firingComponent)
        else
            e.removeComponent(Component.Firing)
        return e
            


    /** IEntity: Health methods*/

    /** @type Health */
    def getHealth(e: IEntity) : HealthComponent
        return (HealthComponent)e.getComponent(Component.Health)

    /** @type boolean */
    def hasHealth(e: IEntity) : bool
        return e.hasComponent(Component.Health)

    def clearHealthComponentPool()
        _healthComponentPool.clear()

    /**
        * @param health double
        * @param maximumHealth double
        * @return entitas.IEntity
        */
    def addHealth(e: IEntity, health:double,maximumHealth:double) : IEntity
        var c = _healthComponentPool.length > 0 ? _healthComponentPool.pop_head() : new HealthComponent()
        c.health = health
        c.maximumHealth = maximumHealth
        e.addComponent(Component.Health, c)
        return e

    /**
        * @param health double
        * @param maximumHealth double
        * @return entitas.IEntity
        */
    def replaceHealth(e: IEntity, health:double,maximumHealth:double) : IEntity
        var previousComponent = hasHealth(e) ? getHealth(e) : null
        var c = _healthComponentPool.length > 0 ? _healthComponentPool.pop_head() : new HealthComponent()
        c.health = health
        c.maximumHealth = maximumHealth
        e.replaceComponent(Component.Health, c) 
        if previousComponent != null
            _healthComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeHealth(e: IEntity) : IEntity
        var c = getHealth(e)
        e.removeComponent(Component.Health) 
        _healthComponentPool.push_head(c)
        return e



    /** IEntity: Layer methods*/

    /** @type Layer */
    def getLayer(e: IEntity) : LayerComponent
        return (LayerComponent)e.getComponent(Component.Layer)

    /** @type boolean */
    def hasLayer(e: IEntity) : bool
        return e.hasComponent(Component.Layer)

    def clearLayerComponentPool()
        _layerComponentPool.clear()

    /**
        * @param ordinal int
        * @return entitas.IEntity
        */
    def addLayer(e: IEntity, ordinal:int) : IEntity
        var c = _layerComponentPool.length > 0 ? _layerComponentPool.pop_head() : new LayerComponent()
        c.ordinal = ordinal
        e.addComponent(Component.Layer, c)
        return e

    /**
        * @param ordinal int
        * @return entitas.IEntity
        */
    def replaceLayer(e: IEntity, ordinal:int) : IEntity
        var previousComponent = hasLayer(e) ? getLayer(e) : null
        var c = _layerComponentPool.length > 0 ? _layerComponentPool.pop_head() : new LayerComponent()
        c.ordinal = ordinal
        e.replaceComponent(Component.Layer, c) 
        if previousComponent != null
            _layerComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeLayer(e: IEntity) : IEntity
        var c = getLayer(e)
        e.removeComponent(Component.Layer) 
        _layerComponentPool.push_head(c)
        return e



    /** IEntity: Life methods*/

    /** @type Life */
    def getLife(e: IEntity) : LifeComponent
        return (LifeComponent)e.getComponent(Component.Life)

    /** @type boolean */
    def hasLife(e: IEntity) : bool
        return e.hasComponent(Component.Life)

    def clearLifeComponentPool()
        _lifeComponentPool.clear()

    /**
        * @param count int
        * @return entitas.IEntity
        */
    def addLife(e: IEntity, count:int) : IEntity
        var c = _lifeComponentPool.length > 0 ? _lifeComponentPool.pop_head() : new LifeComponent()
        c.count = count
        e.addComponent(Component.Life, c)
        return e

    /**
        * @param count int
        * @return entitas.IEntity
        */
    def replaceLife(e: IEntity, count:int) : IEntity
        var previousComponent = hasLife(e) ? getLife(e) : null
        var c = _lifeComponentPool.length > 0 ? _lifeComponentPool.pop_head() : new LifeComponent()
        c.count = count
        e.replaceComponent(Component.Life, c) 
        if previousComponent != null
            _lifeComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeLife(e: IEntity) : IEntity
        var c = getLife(e)
        e.removeComponent(Component.Life) 
        _lifeComponentPool.push_head(c)
        return e



    /** IEntity: Mine methods*/

    /**
        * @param IEntity
        * @return boolean
        */
    def isMine(e: IEntity) : bool
        return e.hasComponent(Component.Mine)

    /**
        * @param IEntity
        * @param value
        * @return IEntity
        */
    def setMine(e: IEntity, value: bool) : IEntity
        if value
            e.addComponent(Component.Mine, _mineComponent)
        else
            e.removeComponent(Component.Mine)
        return e
            


    /** IEntity: Mouse methods*/

    /** @type Mouse */
    def getMouse(e: IEntity) : MouseComponent
        return (MouseComponent)e.getComponent(Component.Mouse)

    /** @type boolean */
    def hasMouse(e: IEntity) : bool
        return e.hasComponent(Component.Mouse)

    def clearMouseComponentPool()
        _mouseComponentPool.clear()

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def addMouse(e: IEntity, x:double,y:double) : IEntity
        var c = _mouseComponentPool.length > 0 ? _mouseComponentPool.pop_head() : new MouseComponent()
        c.x = x
        c.y = y
        e.addComponent(Component.Mouse, c)
        return e

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def replaceMouse(e: IEntity, x:double,y:double) : IEntity
        var previousComponent = hasMouse(e) ? getMouse(e) : null
        var c = _mouseComponentPool.length > 0 ? _mouseComponentPool.pop_head() : new MouseComponent()
        c.x = x
        c.y = y
        e.replaceComponent(Component.Mouse, c) 
        if previousComponent != null
            _mouseComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeMouse(e: IEntity) : IEntity
        var c = getMouse(e)
        e.removeComponent(Component.Mouse) 
        _mouseComponentPool.push_head(c)
        return e



    /** IEntity: Player methods*/

    /**
        * @param IEntity
        * @return boolean
        */
    def isPlayer(e: IEntity) : bool
        return e.hasComponent(Component.Player)

    /**
        * @param IEntity
        * @param value
        * @return IEntity
        */
    def setPlayer(e: IEntity, value: bool) : IEntity
        if value
            e.addComponent(Component.Player, _playerComponent)
        else
            e.removeComponent(Component.Player)
        return e
            


    /** IEntity: Position methods*/

    /** @type Position */
    def getPosition(e: IEntity) : PositionComponent
        return (PositionComponent)e.getComponent(Component.Position)

    /** @type boolean */
    def hasPosition(e: IEntity) : bool
        return e.hasComponent(Component.Position)

    def clearPositionComponentPool()
        _positionComponentPool.clear()

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def addPosition(e: IEntity, x:double,y:double) : IEntity
        var c = _positionComponentPool.length > 0 ? _positionComponentPool.pop_head() : new PositionComponent()
        c.x = x
        c.y = y
        e.addComponent(Component.Position, c)
        return e

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def replacePosition(e: IEntity, x:double,y:double) : IEntity
        var previousComponent = hasPosition(e) ? getPosition(e) : null
        var c = _positionComponentPool.length > 0 ? _positionComponentPool.pop_head() : new PositionComponent()
        c.x = x
        c.y = y
        e.replaceComponent(Component.Position, c) 
        if previousComponent != null
            _positionComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removePosition(e: IEntity) : IEntity
        var c = getPosition(e)
        e.removeComponent(Component.Position) 
        _positionComponentPool.push_head(c)
        return e



    /** IEntity: Resource methods*/

    /** @type Resource */
    def getResource(e: IEntity) : ResourceComponent
        return (ResourceComponent)e.getComponent(Component.Resource)

    /** @type boolean */
    def hasResource(e: IEntity) : bool
        return e.hasComponent(Component.Resource)

    def clearResourceComponentPool()
        _resourceComponentPool.clear()

    /**
        * @param path string
        * @param sprite Object
        * @param bgd bool
        * @return entitas.IEntity
        */
    def addResource(e: IEntity, path:string,sprite:Object?,bgd:bool) : IEntity
        var c = _resourceComponentPool.length > 0 ? _resourceComponentPool.pop_head() : new ResourceComponent()
        c.path = path
        c.sprite = sprite
        c.bgd = bgd
        e.addComponent(Component.Resource, c)
        return e

    /**
        * @param path string
        * @param sprite Object
        * @param bgd bool
        * @return entitas.IEntity
        */
    def replaceResource(e: IEntity, path:string,sprite:Object?,bgd:bool) : IEntity
        var previousComponent = hasResource(e) ? getResource(e) : null
        var c = _resourceComponentPool.length > 0 ? _resourceComponentPool.pop_head() : new ResourceComponent()
        c.path = path
        c.sprite = sprite
        c.bgd = bgd
        e.replaceComponent(Component.Resource, c) 
        if previousComponent != null
            _resourceComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeResource(e: IEntity) : IEntity
        var c = getResource(e)
        e.removeComponent(Component.Resource) 
        _resourceComponentPool.push_head(c)
        return e



    /** IEntity: ScaleTween methods*/

    /** @type ScaleTween */
    def getScaleTween(e: IEntity) : ScaleTweenComponent
        return (ScaleTweenComponent)e.getComponent(Component.ScaleTween)

    /** @type boolean */
    def hasScaleTween(e: IEntity) : bool
        return e.hasComponent(Component.ScaleTween)

    def clearScaleTweenComponentPool()
        _scaleTweenComponentPool.clear()

    /**
        * @param min double
        * @param max double
        * @param speed double
        * @param repeat bool
        * @param active bool
        * @return entitas.IEntity
        */
    def addScaleTween(e: IEntity, min:double,max:double,speed:double,repeat:bool,active:bool) : IEntity
        var c = _scaleTweenComponentPool.length > 0 ? _scaleTweenComponentPool.pop_head() : new ScaleTweenComponent()
        c.min = min
        c.max = max
        c.speed = speed
        c.repeat = repeat
        c.active = active
        e.addComponent(Component.ScaleTween, c)
        return e

    /**
        * @param min double
        * @param max double
        * @param speed double
        * @param repeat bool
        * @param active bool
        * @return entitas.IEntity
        */
    def replaceScaleTween(e: IEntity, min:double,max:double,speed:double,repeat:bool,active:bool) : IEntity
        var previousComponent = hasScaleTween(e) ? getScaleTween(e) : null
        var c = _scaleTweenComponentPool.length > 0 ? _scaleTweenComponentPool.pop_head() : new ScaleTweenComponent()
        c.min = min
        c.max = max
        c.speed = speed
        c.repeat = repeat
        c.active = active
        e.replaceComponent(Component.ScaleTween, c) 
        if previousComponent != null
            _scaleTweenComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeScaleTween(e: IEntity) : IEntity
        var c = getScaleTween(e)
        e.removeComponent(Component.ScaleTween) 
        _scaleTweenComponentPool.push_head(c)
        return e



    /** IEntity: Scale methods*/

    /** @type Scale */
    def getScale(e: IEntity) : ScaleComponent
        return (ScaleComponent)e.getComponent(Component.Scale)

    /** @type boolean */
    def hasScale(e: IEntity) : bool
        return e.hasComponent(Component.Scale)

    def clearScaleComponentPool()
        _scaleComponentPool.clear()

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def addScale(e: IEntity, x:double,y:double) : IEntity
        var c = _scaleComponentPool.length > 0 ? _scaleComponentPool.pop_head() : new ScaleComponent()
        c.x = x
        c.y = y
        e.addComponent(Component.Scale, c)
        return e

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def replaceScale(e: IEntity, x:double,y:double) : IEntity
        var previousComponent = hasScale(e) ? getScale(e) : null
        var c = _scaleComponentPool.length > 0 ? _scaleComponentPool.pop_head() : new ScaleComponent()
        c.x = x
        c.y = y
        e.replaceComponent(Component.Scale, c) 
        if previousComponent != null
            _scaleComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeScale(e: IEntity) : IEntity
        var c = getScale(e)
        e.removeComponent(Component.Scale) 
        _scaleComponentPool.push_head(c)
        return e



    /** IEntity: Score methods*/

    /** @type Score */
    def getScore(e: IEntity) : ScoreComponent
        return (ScoreComponent)e.getComponent(Component.Score)

    /** @type boolean */
    def hasScore(e: IEntity) : bool
        return e.hasComponent(Component.Score)

    def clearScoreComponentPool()
        _scoreComponentPool.clear()

    /**
        * @param value double
        * @return entitas.IEntity
        */
    def addScore(e: IEntity, value:double) : IEntity
        var c = _scoreComponentPool.length > 0 ? _scoreComponentPool.pop_head() : new ScoreComponent()
        c.value = value
        e.addComponent(Component.Score, c)
        return e

    /**
        * @param value double
        * @return entitas.IEntity
        */
    def replaceScore(e: IEntity, value:double) : IEntity
        var previousComponent = hasScore(e) ? getScore(e) : null
        var c = _scoreComponentPool.length > 0 ? _scoreComponentPool.pop_head() : new ScoreComponent()
        c.value = value
        e.replaceComponent(Component.Score, c) 
        if previousComponent != null
            _scoreComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeScore(e: IEntity) : IEntity
        var c = getScore(e)
        e.removeComponent(Component.Score) 
        _scoreComponentPool.push_head(c)
        return e



    /** IEntity: SoundEffect methods*/

    /** @type SoundEffect */
    def getSoundEffect(e: IEntity) : SoundEffectComponent
        return (SoundEffectComponent)e.getComponent(Component.SoundEffect)

    /** @type boolean */
    def hasSoundEffect(e: IEntity) : bool
        return e.hasComponent(Component.SoundEffect)

    def clearSoundEffectComponentPool()
        _soundEffectComponentPool.clear()

    /**
        * @param effect int
        * @return entitas.IEntity
        */
    def addSoundEffect(e: IEntity, effect:int) : IEntity
        var c = _soundEffectComponentPool.length > 0 ? _soundEffectComponentPool.pop_head() : new SoundEffectComponent()
        c.effect = effect
        e.addComponent(Component.SoundEffect, c)
        return e

    /**
        * @param effect int
        * @return entitas.IEntity
        */
    def replaceSoundEffect(e: IEntity, effect:int) : IEntity
        var previousComponent = hasSoundEffect(e) ? getSoundEffect(e) : null
        var c = _soundEffectComponentPool.length > 0 ? _soundEffectComponentPool.pop_head() : new SoundEffectComponent()
        c.effect = effect
        e.replaceComponent(Component.SoundEffect, c) 
        if previousComponent != null
            _soundEffectComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeSoundEffect(e: IEntity) : IEntity
        var c = getSoundEffect(e)
        e.removeComponent(Component.SoundEffect) 
        _soundEffectComponentPool.push_head(c)
        return e



    /** IEntity: Text methods*/

    /** @type Text */
    def getText(e: IEntity) : TextComponent
        return (TextComponent)e.getComponent(Component.Text)

    /** @type boolean */
    def hasText(e: IEntity) : bool
        return e.hasComponent(Component.Text)

    def clearTextComponentPool()
        _textComponentPool.clear()

    /**
        * @param text string
        * @param sprite Object
        * @return entitas.IEntity
        */
    def addText(e: IEntity, text:string,sprite:Object?) : IEntity
        var c = _textComponentPool.length > 0 ? _textComponentPool.pop_head() : new TextComponent()
        c.text = text
        c.sprite = sprite
        e.addComponent(Component.Text, c)
        return e

    /**
        * @param text string
        * @param sprite Object
        * @return entitas.IEntity
        */
    def replaceText(e: IEntity, text:string,sprite:Object?) : IEntity
        var previousComponent = hasText(e) ? getText(e) : null
        var c = _textComponentPool.length > 0 ? _textComponentPool.pop_head() : new TextComponent()
        c.text = text
        c.sprite = sprite
        e.replaceComponent(Component.Text, c) 
        if previousComponent != null
            _textComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeText(e: IEntity) : IEntity
        var c = getText(e)
        e.removeComponent(Component.Text) 
        _textComponentPool.push_head(c)
        return e



    /** IEntity: Tint methods*/

    /** @type Tint */
    def getTint(e: IEntity) : TintComponent
        return (TintComponent)e.getComponent(Component.Tint)

    /** @type boolean */
    def hasTint(e: IEntity) : bool
        return e.hasComponent(Component.Tint)

    def clearTintComponentPool()
        _tintComponentPool.clear()

    /**
        * @param r int
        * @param g int
        * @param b int
        * @param a int
        * @return entitas.IEntity
        */
    def addTint(e: IEntity, r:int,g:int,b:int,a:int) : IEntity
        var c = _tintComponentPool.length > 0 ? _tintComponentPool.pop_head() : new TintComponent()
        c.r = r
        c.g = g
        c.b = b
        c.a = a
        e.addComponent(Component.Tint, c)
        return e

    /**
        * @param r int
        * @param g int
        * @param b int
        * @param a int
        * @return entitas.IEntity
        */
    def replaceTint(e: IEntity, r:int,g:int,b:int,a:int) : IEntity
        var previousComponent = hasTint(e) ? getTint(e) : null
        var c = _tintComponentPool.length > 0 ? _tintComponentPool.pop_head() : new TintComponent()
        c.r = r
        c.g = g
        c.b = b
        c.a = a
        e.replaceComponent(Component.Tint, c) 
        if previousComponent != null
            _tintComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeTint(e: IEntity) : IEntity
        var c = getTint(e)
        e.removeComponent(Component.Tint) 
        _tintComponentPool.push_head(c)
        return e



    /** IEntity: Velocity methods*/

    /** @type Velocity */
    def getVelocity(e: IEntity) : VelocityComponent
        return (VelocityComponent)e.getComponent(Component.Velocity)

    /** @type boolean */
    def hasVelocity(e: IEntity) : bool
        return e.hasComponent(Component.Velocity)

    def clearVelocityComponentPool()
        _velocityComponentPool.clear()

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def addVelocity(e: IEntity, x:double,y:double) : IEntity
        var c = _velocityComponentPool.length > 0 ? _velocityComponentPool.pop_head() : new VelocityComponent()
        c.x = x
        c.y = y
        e.addComponent(Component.Velocity, c)
        return e

    /**
        * @param x double
        * @param y double
        * @return entitas.IEntity
        */
    def replaceVelocity(e: IEntity, x:double,y:double) : IEntity
        var previousComponent = hasVelocity(e) ? getVelocity(e) : null
        var c = _velocityComponentPool.length > 0 ? _velocityComponentPool.pop_head() : new VelocityComponent()
        c.x = x
        c.y = y
        e.replaceComponent(Component.Velocity, c) 
        if previousComponent != null
            _velocityComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.IEntity
        */
    def removeVelocity(e: IEntity) : IEntity
        var c = getVelocity(e)
        e.removeComponent(Component.Velocity) 
        _velocityComponentPool.push_head(c)
        return e


